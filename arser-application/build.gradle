plugins {
    id("java")
}

clean {
    Directory projectDir = layout.projectDirectory

    doFirst {
        Directory dirApp = projectDir.dir("app")

        if (dirApp.getAsFile().exists()) {
            logger.lifecycle("delete {}", dirApp)
//        delete(fileTree(dirApp).include("**/*"))
            delete(dirApp)
        }
    }
}

dependencies {
    implementation(project(":arser-core"))

    runtimeOnly("org.apache.logging.log4j:log4j-slf4j2-impl")
}

jar {
    enabled = false
}

test {
    enabled = false
}

tasks.register("buildApp", Copy) {
    group = "Arser"
    description = "build the app"

    dependsOn(":arser-test:build")

    doLast {
        logger.lifecycle("build {}", project.name)
    }

    // Create Root-Dir
    into layout.projectDirectory.dir("app")

    into("bin") {
        from(layout.projectDirectory.dir("service").file("arser.sh"))
    }

    into("libs") {
        from(configurations.runtimeClasspath)
    }

    into("resources") {
        from(layout.projectDirectory.dir("src").dir("main").dir("resources")) {
            include("log4j2.xml")
            include("arser-config.xml")
        }
    }

//    eachFile { println(it.name) }
}

// No verbose-Mode
tasks.register("deployApp", Sync) {
    group = "Arser"
    description = "deploy the app"

    dependsOn("buildApp")

    doLast {
        logger.lifecycle("deploy {}", project.name)
    }

    Directory appFolder = layout.projectDirectory.dir("app")
    String remoteFolder = "/opt/jvmapps/arser"

    // Create Root-Dir
    into(remoteFolder)

    into("bin") {
        from(appFolder.dir("bin"))
        filePermissions {
            user {
                read = true
                execute = true
            }
            other.execute = false
        }
    }

    into("libs") {
        from(appFolder.dir("libs"))
        filePermissions {
            user {
                read = true
                execute = false
            }
            other.execute = false
        }
    }

    into("resources") {
        from(appFolder.dir("resources"))
        filePermissions {
            user {
                read = true
                execute = false
            }
            other.execute = false
        }
    }

//    eachFile { println(it.name) }
}

//tasks.register("deployApp") {
//    group = "Arser"
//
//    doLast {
//        logger.lifecycle("deploy {}", project.name)
//
//        Directory appFolder = layout.projectDirectory.dir("app")
//        String remoteFolder = "/opt/jvmapps/arser"
//
//        ant.mkdir(dir: remoteFolder + "/logs")
//
//        ant.sync(todir: remoteFolder + "/bin", overwrite: true, verbose: true) {
//            fileset(dir: appFolder.dir("bin"))
//        }
//
//        ant.sync(todir: remoteFolder + "/libs", overwrite: true, verbose: true) {
//            fileset(dir: appFolder.dir("libs"))
//        }
//
//        ant.sync(todir: remoteFolder + "/resources", overwrite: true, verbose: true) {
//            fileset(dir: appFolder.dir("resources"))
//        }
//
//        // Funktioniert nicht, wegen Fehler: "Could not find method from() for arguments ..."
////        sync {
////            from(appFolder.dir("resources"))
////            into(remoteFolder + "/resources")
////            preserve {
////                include("extraDir/**")
////                include("dir1/**")
////                exclude("dir1/extra.txt")
////            }
////        }
//    }
//}

//tasks.register("buildDeploy") {
//    group = "Arser"
//
//    doLast {
//        tasks.buildApp.execute()
//    }
//}

//tasks.register("deleteAppFolder", Delete) {
//    description = "Delete app-Folder."
//    group = "Maintenance"
//
//    logger.lifecycle("delete app-Folder: {}/app", ${projectDir})
//
//    delete(fileTree("app")) {
//        include("**/*.*")
//    }
//}
//clean.finalizedBy("deleteAppFolder")

// tasks.register("backup") {
//     group = "MyTasks"
//
//     doLast {
//         ant.sync(todir: layout.projectDirectory.dir("root").dir("dst"), overwrite: true, verbose: true) {
//             fileset(dir: "src") {
//                 include(name: "**/*.gradle")
//                 include(name: "**/gradle.properties")
//             }
//         }
//
//         // delete(layout.projectDirectory.dir("root ").dir("dst"))
//         //
//         // copy {
//         //     from("src")
//         //     into(layout.projectDirectory.dir("root").dir("dst"))
//         //     include("**/*.gradle")
//         //     include("**/gradle.properties")
//         //     includeEmptyDirs = false
//         // }
//
//         // CopySpec gradleSpec = copySpec {
//         //     from("src") {
//         //         include("**/*.gradle")
//         //         include("**/gradle.properties")
//         //         includeEmptyDirs = false
//         //     }
//         //     into("dst")
//         // }
//         //
//         // copy {
//         //     into(layout.projectDirectory.dir("root"))
//         //     with(gradleSpec)
//         // }
//     }
// }

// myMethod(layout.buildDirectory)
//
// def myMethod(Provider<Directory> dir) {
//     println(dir.get())
// }
//
// Syntax for own File.
// ext.myMethod = { Provider<Directory> dir ->
//     println(dir.get())
// }

// dependsOn(":parent:build")
// build.finalizedBy("copy")
//
//// Register ANT-Tasks as Gradle-Tasks with Prefix "ant-" in Group "other".
//ant.importBuild("ant_build.xml") { antTargetName -> "ant-" + antTargetName }
//
//// Set group property for all Ant tasks.
//tasks.matching { task -> task.name.startsWith("ant-") }.configureEach{ group = "Ant" }
//
// // Target "buildHelp" in ant-hilfe.xml
// "ant-buildHelp" {
//     // Use Build-Cache: Tasks in depends="..." will be executed before.
//     inputs.dir(layout.projectDirectory.dir("src").dir("main").dir("resources"))
//     outputs.dir(layout.projectDirectory.dir("dist"))
//
//     // doLast {
//     //     println("copy help")
//     //     copy {
//     //         from(layout.projectDirectory.dir("dist"))
//     //         into(layout.projectDirectory.dir("..").dir("hilfe"))
//     //     }
//     // }
// }
// build.finalizedBy("ant-buildHelp")
// //buildHelp.dependsOn("ant-buildHelp")

// tasks.register("buildApp") {
//    group = "Arser"
//
//     doLast {
//        logger.lifecycle("build {}", project.name)
//
//        Directory appFolder = layout.projectDirectory.dir("app")
//
//        mkdir(appFolder.dir("logs"))
//
//        CopySpec binSpec = copySpec {
//            from(layout.projectDirectory.dir("service").file("arser.sh"))
//            into("bin")
//        }
//        CopySpec libSpec = copySpec {
//            from(configurations.runtimeClasspath)
//            into("libs")
//        }
//        CopySpec resSpec = copySpec {
//            from(layout.projectDirectory.dir("src").dir("main").dir("resources")) {
//                include("log4j2.xml")
//                include("arser-config.xml")
//            }
//            into("resources")
//        }
//        copy {
//            into(appFolder)
//            with(binSpec, libSpec, resSpec)
//        }
//
////        copy {
////            into(appFolder.dir("bin"))
////            from(layout.projectDirectory.dir("service").file("arser.sh"))
////        }
////        copy {
////            into(appFolder.dir("libs"))
////            from(configurations.runtimeClasspath)
////        }
////        copy {
////            into(appFolder.dir("resources"))
////            from(layout.projectDirectory.dir("src").dir("main").dir("resources")) {
////                include("log4j2.xml")
////                include("arser-config.xml")
////            }
////        }
//
//         copy {
//             into appFolder.resolve("bin")
//             rename("a-" + project.version + ". properties", "a. properties")
//
//             from(layout.projectDirectory.dir("..").dir("dir1") {
//                 include("*. properties")
//             }
//             from(layout.projectDirectory.dir("..").dir("dir2") {
//                 include("a.properties")
//             }
//         }
//     }
// }
